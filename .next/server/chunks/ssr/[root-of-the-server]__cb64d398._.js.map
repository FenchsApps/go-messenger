{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/filter-profanity.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Implements profanity filtering using Genkit.\n *\n * - filterProfanity - A function that filters explicit content.\n * - FilterProfanityInput - The input type for the filterProfanity function.\n * - FilterProfanityOutput - The return type for the filterProfanity function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst FilterProfanityInputSchema = z.object({\n  text: z\n    .string()\n    .describe(\"The text to filter for profanity and explicit content.\"),\n});\nexport type FilterProfanityInput = z.infer<typeof FilterProfanityInputSchema>;\n\nconst FilterProfanityOutputSchema = z.object({\n  filteredText: z\n    .string()\n    .describe(\"The filtered text with profanity and explicit content removed.\"),\n});\nexport type FilterProfanityOutput = z.infer<typeof FilterProfanityOutputSchema>;\n\nexport async function filterProfanity(input: FilterProfanityInput): Promise<FilterProfanityOutput> {\n  return filterProfanityFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'filterProfanityPrompt',\n  input: {schema: FilterProfanityInputSchema},\n  output: {schema: FilterProfanityOutputSchema},\n  prompt: `You are a content moderation AI responsible for filtering profanity and explicit language from user-generated text.  You must use reasoning to determine whether the content should be filtered.\n\n  Here is the text to filter:\n  {{text}}\n\n  Return the filtered text. If the text does not contain profanity, return the original text.\n  Even if a word is not directly a swear, you need to check if it is used in a profane context and filter it appropriately.\n  If you are unsure, filter the word.\n  `,\n});\n\nconst filterProfanityFlow = ai.defineFlow(\n  {\n    name: 'filterProfanityFlow',\n    inputSchema: FilterProfanityInputSchema,\n    outputSchema: FilterProfanityOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,uIAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// @ts-nocheck\n'use server';\nimport { filterProfanity } from '@/ai/flows/filter-profanity';\n\nexport async function getFilteredMessage(text: string) {\n  if (!text.trim()) {\n    return { error: 'Message cannot be empty', data: null };\n  }\n\n  try {\n    const { filteredText } = await filterProfanity({ text });\n    return {\n      error: null,\n      data: {\n        id: crypto.randomUUID(),\n        text: filteredText,\n      }\n    };\n  } catch (error) {\n    console.error('Error filtering profanity:', error);\n    // Fallback to original text if AI fails\n    return {\n      error: 'Failed to process message with AI',\n      data: {\n        id: crypto.randomUUID(),\n        text: text,\n      }\n    };\n  }\n}\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;AAEd;;;;;AAEO,eAAe,mBAAmB,IAAY;IACnD,IAAI,CAAC,KAAK,IAAI,IAAI;QAChB,OAAO;YAAE,OAAO;YAA2B,MAAM;QAAK;IACxD;IAEA,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE;YAAE;QAAK;QACtD,OAAO;YACL,OAAO;YACP,MAAM;gBACJ,IAAI,OAAO,UAAU;gBACrB,MAAM;YACR;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,wCAAwC;QACxC,OAAO;YACL,OAAO;YACP,MAAM;gBACJ,IAAI,OAAO,UAAU;gBACrB,MAAM;YACR;QACF;IACF;AACF;;;IAzBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getFilteredMessage as '40a8fec7cdefd0ea77a3ee93895583fba2af256290'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/messenger.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Messenger = registerClientReference(\n    function() { throw new Error(\"Attempted to call Messenger() from the server but Messenger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/messenger.tsx <module evaluation>\",\n    \"Messenger\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/messenger.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Messenger = registerClientReference(\n    function() { throw new Error(\"Attempted to call Messenger() from the server but Messenger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/messenger.tsx\",\n    \"Messenger\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { Messenger } from '@/components/messenger';\n\nexport default function Home() {\n  return <Messenger />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,+HAAA,CAAA,YAAS;;;;;AACnB","debugId":null}}]
}